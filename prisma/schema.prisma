// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user") // "admin" or "user"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pages         Page[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id         String    @id @default(cuid())
  title      String
  slug       String    @unique
  content    String    // JSON content from WYSIWYG editor
  isPublished Boolean  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  menuItems  MenuItem[]
  documents  Document[]
}

model MenuItem {
  id       String    @id @default(cuid())
  label    String
  link     String?
  pageId   String?
  page     Page?     @relation(fields: [pageId], references: [id], onDelete: SetNull)
  parentId String?
  parent   MenuItem? @relation("MenuItemToMenuItem", fields: [parentId], references: [id], onDelete: SetNull)
  children MenuItem[] @relation("MenuItemToMenuItem")
  order    Int       @default(0)
}

model Document {
  id          String   @id @default(cuid())
  title       String
  fileName    String
  fileSize    Int
  fileType    String
  description String?
  pageId      String?
  page        Page?    @relation(fields: [pageId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categories  DocumentsOnCategories[]
  expiresAt   DateTime?
  isArchived  Boolean  @default(false)
}

model DocumentCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  documents   DocumentsOnCategories[]
}

model DocumentsOnCategories {
  document     Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId   String
  category     DocumentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  assignedAt   DateTime        @default(now())

  @@id([documentId, categoryId])
} 